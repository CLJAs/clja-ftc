#!/usr/bin/env python
# -*- coding: utf-8 -*-


__author__ = 'Juan Carlos Caso Alonso'
__project__ = 'clja'

from source.ExcepcionesClja.CljaError import CljaError
from source.cljas.CljaPNN import CljaPNN
from source.cljas.clja_ftc.ListaCFsCljaFtc import ListaCFsCljaFtc
from source.conjuntos.camino_finito.CaminoFinito import CaminoFinito


class CljaFtc(object):

    def __init__(self, arbol_de_composicion):
        self.arbol = arbol_de_composicion

    # *****************************************************************
    # FLJA DIRECTA:
    # *****************************************************************
    def flja_absoluta(self, w, lista_de_caminos):
        lista_cfs = ListaCFsCljaFtc(lista_de_caminos, tipo_flja=ListaCFsCljaFtc.FLJA_ABSOLUTA)
        return self._flja(w, lista_cfs)

    def flja_practica(self, w, lista_de_caminos):
        lista_cfs = ListaCFsCljaFtc(lista_de_caminos, tipo_flja=ListaCFsCljaFtc.FLJA_PRACTICA)
        return self._flja(w, lista_cfs)

    # Esta es la que hace el calculo de la flja directa
    def _flja(self, w, caminos):
        cljas = self.__extraer_lista_cljas(caminos)
        self.__chequear_cljas_vs_caminos(cljas, caminos)

        # Estamos en las condiciones idóneas para ejecutar la flja directa:
        tb = 0
        k_iteration = w
        for pos in range(len(caminos) - 1, -1, -1):
            clja = cljas[pos]
            camino = caminos[pos]
            tb = clja.flja(k_iteration, camino)
            k_iteration = tb
        # La constante compuesta de cada clja nos dice si añade o no el cardinal de previos o si aplica NW().
        return tb

    def __extraer_lista_cljas(self, caminos):
        lista_cljas = []

        # keys no permite indexacion, de ahi pasarlo a list.
        #clja = list(self.arbol.keys())[0]
        clja = self.primera_clja()

        # Cojo la lista de opciones para diferentes DRs: pares de un numero y una clja.
        opciones_dr = self.arbol[clja]

        camino = caminos[0]

        indice = 0
        while (indice < len(caminos)) and (camino.dr > 0) and (clja is not None):
            lista_cljas.append(clja)
            clja = list(opciones_dr[camino.dr].keys())[0]
            opciones_dr = opciones_dr[camino.dr]
            indice += 1
            camino = caminos[indice]
        if clja is not None:
            lista_cljas.append(clja)
        return lista_cljas

    def __chequear_cljas_vs_caminos(self, lista_cljas, caminos):
        for indice in range(0, len(lista_cljas)):
            lista_cljas[indice].check_cf(caminos[indice])

    # *****************************************************************
    # FLJA INVERSA:
    # *****************************************************************

    def flja_inversa(self, natural):
        lista_CFs = []
        lista_de_etiquetas = []
        clja = self.primera_clja()
        if natural < len(self.primera_clja().previos):
            return 0, self.primera_clja().previos[natural]
        opciones_dr = self.arbol[clja]
        # Unica vez que se llama a nw_inversa, por si la clja tiene previos, y el típico -1.
        # YA tenemos el "total de bolas" real que llega hasta el reparto:
        total_de_bolas = self.nw_inversa(natural)
        seguir = True

        while (seguir):
            #Paso 1: diferencia el metodo de la variable, ojo!!
            valor_ub1i, exacto = clja.funcion_ub1i(total_de_bolas)

            # Paso 2:
            if exacto:
                pos_hueco = valor_ub1i
                iteracion = valor_ub1i
            else:
                pos_hueco = total_de_bolas - clja.b1_inversa(valor_ub1i)
                iteracion = valor_ub1i + 1

            # Paso 3:
            k_bolas = (iteracion - pos_hueco) + 1

            # Paso 4:
            p = pos_hueco % (clja.huecos_rojos + 1)
            if p == 0:
                dr_in_this_room = 0
            elif p > 0:
                dr_in_this_room = (clja.huecos_rojos + 1) - p
            else:
                raise CljaError("Al calcular si es un hueco rojo ha habido un error inesperado.")

            # Paso 5:

            if dr_in_this_room == 0:
                # 5a: es un hueco azul, seguimos por la misma clja:
                if len(lista_de_etiquetas) > 0:
                    etiqueta_anterior = lista_de_etiquetas[len(lista_de_etiquetas) - 1]
                else:
                    etiqueta_anterior = CaminoFinito.LAMBDA_CERO # -1
                etiqueta = (pos_hueco // (clja.huecos_rojos + 1)) + etiqueta_anterior

                total_de_bolas = k_bolas - clja.L # Es un hueco azul, no pasan todas a la sig habitación.
                lista_de_etiquetas.append(etiqueta)
                if k_bolas <= clja.L:
                    seguir = False # Paramos totalmente!!
                    camino = CaminoFinito(lista_de_etiquetas, dr_in_this_room)
                    lista_CFs.append(camino)
                    w = k_bolas
            else:
                # 5b : es u hueco rojo, hay que cerrar el camino finito y seguir a la posible siguiente clja:
                # punto 5b b: cerramos el camino
                if len(lista_de_etiquetas) > 0:
                    etiqueta_anterior = lista_de_etiquetas[len(lista_de_etiquetas) - 1]
                else:
                    etiqueta_anterior = CaminoFinito.LAMBDA_CERO # -1
                # El +1 es la diferencia con el cálculo anterior, un huevo rojo tiene su etiqueta a la derecha.
                etiqueta = (pos_hueco // (clja.huecos_rojos + 1)) + 1 + etiqueta_anterior
                lista_de_etiquetas.append(etiqueta)
                camino = CaminoFinito(lista_de_etiquetas, dr_in_this_room)
                lista_CFs.append(camino)

                #Punto 5b c: preparamos las cosas para la nueva clja:
                lista_de_etiquetas = []
                total_de_bolas = k_bolas # Es un hueco rojo, pasan todas.

                # punto 5b a:
                clja = list(opciones_dr[dr_in_this_room])[0]
                opciones_dr = opciones_dr[dr_in_this_room]
                if (clja is None) or (opciones_dr is None):
                    raise CljaError("Hemos llegado a u nivel del arbol de composicion que no deberíamos")

        return w, ListaCFsCljaFtc(lista_CFs, ListaCFsCljaFtc.FLJA_ABSOLUTA)

    def nw_inversa(self, natural):
        clja = self.primera_clja()
        return clja.nw_inversa(natural)

    def primera_clja(self):
        clja = list(self.arbol.keys())[0]
        return clja



    # *****************************************************************
    # PROPERTIES:
    # *****************************************************************
    def _get_arbol(self):
        return self.__arbol

    def _set_arbol(self, nuevo_arbol_de_composicion):
        self.__arbol = nuevo_arbol_de_composicion

    arbol = property(_get_arbol, _set_arbol)


if __name__ == "__main__":

    def mostrar_un_resultado_inverso(clja, numero_natural, test_de_fallo=False, falla_en=9978):
        valor = numero_natural
        w_inverso, camino_inverso = clja.flja_inversa(valor)

        print("Para el natural:", valor)
        print("Nos da los caminos:")
        print(camino_inverso)
        print("Con w: ", str(w_inverso))
        if not isinstance(camino_inverso, str):
            for cam in camino_inverso.lista:
                if not isinstance(cam, str):
                    print(cam.show_formato_nkn())
        if isinstance(camino_inverso, ListaCFsCljaFtc):
            if isinstance(camino_inverso, str):
                if camino_inverso == "vacio":
                    valor2 = 0
                elif camino_inverso == "yogurB":
                    valor2 = 1
            else:
                valor2 = clja.flja_absoluta(w_inverso, camino_inverso.lista)
            if (numero_natural == falla_en) and test_de_fallo:
                valor2 -= 1
            if valor == valor2:
                print("COINCIDEN DIRECTO E INVERSO!!")
            else:
                raise CljaError("No coinciden la función directa y la inversa!!")
        else:
            print("Es un miembro de previos")

        print("TAMAÑO EN DIGITOS DEL NATURAL: ", len(numero_natural.__str__()))
        print("TAMAÑO DEL CAMINO NORMAL:      ", len(camino_inverso.__str__()))
        # print("TAMAÑO EN FORMATO NKN:         ", len(camino_inverso.lista[0].show_formato_nkn()) - 13)
        print("\n*********************************************\n")

    """
    cljapnn1  = CljaPNN(1, 1, ["vacio", "yogurB"], False, clja_hash_value=1)
    cljapnn2a = CljaPNN(1, 0, [], True, clja_hash_value=2)
    cljapnn2b = CljaPNN(1, 1, [], True, clja_hash_value=2)
    # La 2a y la 3 son del mismo "tipo"... pero por dejarlo más claro, creo la nueva variable 3:
    cljapnn3 = CljaPNN(1, 0, [], True, clja_hash_value=3)

    # TODO:
    # El arbol debe crearse a mano. He pensado en definirlo con json o algo parecido en un fichero:
    # El valor 0 no sé si quitarlo, no debería consultarse nunca.
    arbol_ftc = {
        cljapnn1: {
            0: None,
            1: {
                cljapnn2a: {
                    0: None
                }
            }
        }
    }

    arbol_ftc_plus = {
        cljapnn1: {
            0: None,
            1: {
                cljapnn2b: {
                    0: None,
                    1: {
                        cljapnn3: {
                            0: None
                        }
                    }
                }
            }
        }
    }

    cf1  = CaminoFinito("{0}", 1)
    cf2a = CaminoFinito("{0}", 0)
    cf2b = CaminoFinito("{0}", 1)
    cf3  = CaminoFinito("{0}", 0)

    cf1b = CaminoFinito("{35,39}", 1)
    cf2b = CaminoFinito("{0}", 0)

    cf1c = CaminoFinito("{218}", dr=1)
    cf2c = CaminoFinito("{25,27,28,29}", dr=0)

    lista_de_caminos_001 = [cf1, cf2a]
    lista_de_caminos_002 = [cf1, cf2b, cf3]
    lista_de_caminos_003 = [cf1b, cf2b]
    lista_de_caminos_004 = [cf1c, cf2c]

    clja_ftc1 = CljaFtc(arbol_ftc)
    valor = clja_ftc1.flja_absoluta(1, lista_de_caminos_004)
    print(valor)

    mostrar_un_resultado_inverso(clja_ftc1, 98253443662)

    # valor = 8646728181026489602610406537158318670928372786737024641130379069394221138489756289944296330853769250295319449839701747788578674704953281144479843995473538301610130630818396456618570491270235271553
    mostrar_un_resultado_inverso(clja_ftc1,477288575441668738432294713119626675675569241613159952783185439580411090350769658392112879389265614198782965452411521307616865092560705943624260525071725451188772615676309079305202590059873569621342083958688801767147184051649126108593853606938219268851734157413188505948208240233449399479986485112917648790112466322347995459991621836163820468115529299745912598945573079140079985634817847709935532426800789214002177655356497863229795160162627031741487154384288186805406381379682762503007603845052410558777995028061890489440765096654198608680701257535261150673665412573775953732809509438302954337919917199139391926356379800502773715608651017834046926058275593099220690737602697814687471300508157383963240005210795984429582155888754850507404151476569112931149650580062784848452815811633575375387236099832358151965945163117580589532684179669821131402914328352818)

    mostrar_un_resultado_inverso(clja_ftc1, 0)
    mostrar_un_resultado_inverso(clja_ftc1, 1)
    """
    cljapnn5 = CljaPNN(1, 1, ["vacio", "yogurB"], False, clja_hash_value=1)
    cljapnn6 = CljaPNN(1, 0, [], True, clja_hash_value=2)

    arbol_ftc3 = {
        cljapnn5: {
            0: None,
            1: {
                cljapnn6: {
                    0: None
                }
            }
        }
    }
    clja_ftc3 = CljaFtc(arbol_ftc3)
    """
    for i in range(


    ):
        mostrar_un_resultado_inverso(clja_ftc3, i)


    mostrar_un_resultado_inverso(
        clja_ftc3,
        94156575587063183742435118315579149471380793840065132386133229965706408344308742188076067173991980963734344843602542492492998733764974139124385427589333130574390189335609961929951172276418003667983621066182773333071788882179737534696170926299625783877309115862948377302724868823168846346203293488280503785727351841570559813554000175726921795112545384876067307742434932988652209506287432727296983782965079732443976951657553516679493868412023854572114156984073577823073904968655526601779962125814264512791317326279624587175334152470828961774563005485456324230728588302217034298049790945880343809630622
    )
    mostrar_un_resultado_inverso(
        clja_ftc3,
        300581529682673715055086694653868372269414558511971417550242580928945057657931625440000070844654378860172728797371708051948915233379966131045209991525555259277815388111745338311655654102085159802661114600985115242742426305449093719387523684512651841505885565663805828967872966298987410712758446562570
    )
    """
    """
    for i in range(


    ):
        mostrar_un_resultado_inverso(clja_ftc3, i)


    for i in range(0, 100):
        mostrar_un_resultado_inverso(clja_ftc1, i, test_de_fallo=True, falla_en=9999999)
    """

    for i in range(0, 1000):
        mostrar_un_resultado_inverso(clja_ftc3, i)

    """
    cf_x2 = CaminoFinito("{1,2}")
    cf_x1 = CaminoFinito("{1,27}")
    cf_a0 = CaminoFinito("{0,2}")
    cf_a1 = CaminoFinito("{0,14}")
    cf_a2 = CaminoFinito("{0,70}")
    cf_a3 = CaminoFinito("{0,257}")
    cf_a4 = CaminoFinito("{0,707}")
    cf_a5 = CaminoFinito("{0,1600}")
    cf_a6 = CaminoFinito("{0,3164}")
    cf_a7 = CaminoFinito("{0,5675}")
    cf_a8 = CaminoFinito("{0,9457}")
    cf_a9 = CaminoFinito("{0,14882}")
    cf_a10 = CaminoFinito("{0,22370}")

    lista_diagonalizacion_vs_enumeracion = [cf_x2, cf_x1, cf_a0, cf_a1, cf_a2, cf_a3, cf_a4, cf_a5,
                                            cf_a6, cf_a7, cf_a8, cf_a9, cf_a10]

    for cf in lista_diagonalizacion_vs_enumeracion:
        cadena = cf.__str__() + " -> "
        resultado = clja_ftc3.flja_practica(1, [cf])
        cadena = cadena + resultado.__str__()
        print(cadena)
    """
    """
    for i in range(0, 124):
        mostrar_un_resultado_inverso(clja_ftc3, i, test_de_fallo=True, falla_en=9999999)
    print(clja_ftc3.flja_inversa(0))
    print(clja_ftc3.flja_inversa(1))
    for i in range(0, 124):
        resultado = clja_ftc3.flja_inversa(i)
        cadena = "NATURAL: " + i.__str__() + " -> "
        cadena += "w: " + resultado[0].__str__() + " -> CF: "
        cadena += resultado[1].__str__()
        print(cadena)
    """
    def mostrar_un_resultado_directo (w, lista_cfs):
        lista = ListaCFsCljaFtc(lista_cfs, tipo_flja=ListaCFsCljaFtc.FLJA_ABSOLUTA)
        cadena = lista.__str__() + " -> "
        resultado = clja_ftc3.flja_absoluta(1, lista.lista)
        cadena = cadena + resultado.__str__()
        print(cadena)

    cf_01 = CaminoFinito("{0}")
    cf_01_a = CaminoFinito("{0}", dr=1)
    cf_01_b = CaminoFinito("{0}", dr=0)
    cf_01_c = CaminoFinito("{0,1}", dr=0)

    cf_02 = CaminoFinito("{0,1}")
    cf_02_a = CaminoFinito("{0,1}", dr=1)
    cf_02_b = CaminoFinito("{0}", dr=0)
    cf_02_c = CaminoFinito("{0,1}", dr=0)

    cf_03 = CaminoFinito("{0,1,2}")
    cf_03_a = CaminoFinito("{0,1,2}", dr=1)
    cf_03_b = CaminoFinito("{0}", dr=0)
    cf_03_c = CaminoFinito("{0,1}", dr=0)

    cf_04 = CaminoFinito("{0,1,2,3}")
    cf_04_a = CaminoFinito("{0,1,2,3}", dr=1)
    cf_04_b = CaminoFinito("{0}", dr=0)
    cf_04_c = CaminoFinito("{0,1}", dr=0)

    cf_05 = CaminoFinito("{0,1,2,3,4}")
    cf_05_a = CaminoFinito("{0,1,2,3,4}", dr=1)
    cf_05_b = CaminoFinito("{0}", dr=0)
    cf_05_c = CaminoFinito("{0,1}", dr=0)

    cf_06 = CaminoFinito("{0,1,2,3,4,5}")
    cf_06_a = CaminoFinito("{0,1,2,3,4,5}", dr=1)
    cf_06_b = CaminoFinito("{0}", dr=0)
    cf_06_c = CaminoFinito("{0,1}", dr=0)

    cf_07 = CaminoFinito("{0,1,2,3,4,5,6}")
    cf_07_a = CaminoFinito("{0,1,2,3,4,5,6}", dr=1)
    cf_07_b = CaminoFinito("{0}", dr=0)
    cf_07_c = CaminoFinito("{0,1}", dr=0)

    cf_08 = CaminoFinito("{0,1,2,3,4,5,6,7}")
    cf_08_a = CaminoFinito("{0,1,2,3,4,5,6,7}", dr=1)
    cf_08_b = CaminoFinito("{0}", dr=0)
    cf_08_c = CaminoFinito("{0,1}", dr=0)

    cf_09 = CaminoFinito("{0,1,2,3,4,5,6,7,8}")
    cf_09_a = CaminoFinito("{0,1,2,3,4,5,6,7,8}", dr=1)
    cf_09_b = CaminoFinito("{0}", dr=0)
    cf_09_c = CaminoFinito("{0,1}", dr=0)

    cf_10 = CaminoFinito("{0,1,2,3,4,5,6,7,8,9}")
    cf_10_a = CaminoFinito("{0,1,2,3,4,5,6,7,8,9}", dr=1)
    cf_10_b = CaminoFinito("{0}", dr=0)
    cf_10_c = CaminoFinito("{0,1}", dr=0)

    cf_11 = CaminoFinito("{2,5,10}", dr=0)
    cf_11_a = CaminoFinito("{2,5,10}", dr=1)
    cf_11_b = CaminoFinito("{2}", dr=0)
    cf_11_c = CaminoFinito("{2,5}", dr=0)

    lista_de_caminos = [
        cf_01, cf_01_a, cf_01_b, cf_01_c,
        cf_02, cf_02_a, cf_02_b, cf_02_c,
        cf_03, cf_03_a, cf_03_b, cf_03_c,
        cf_04, cf_04_a, cf_04_b, cf_04_c,
        cf_05, cf_05_a, cf_05_b, cf_05_c,
        cf_06, cf_06_a, cf_06_b, cf_06_c,
        cf_07, cf_07_a, cf_07_b, cf_07_c,
        cf_08, cf_08_a, cf_08_b, cf_08_c,
        cf_09, cf_09_a, cf_09_b, cf_09_c,
        cf_10, cf_10_a, cf_10_b, cf_10_c,
        cf_11, cf_11_a, cf_11_b, cf_11_c,
    ]

    i = -1
    for cf in lista_de_caminos:
        i += 1
        print(cf)
        if i == 3:
            print("\n")
            i = -1

    j = 0
    for i in range(0, 11):
        pos = j
        mostrar_un_resultado_directo(1, [lista_de_caminos[j]])
        mostrar_un_resultado_directo(1, [lista_de_caminos[j+1], lista_de_caminos[j+2]])
        mostrar_un_resultado_directo(1, [lista_de_caminos[j+1], lista_de_caminos[j+3]])
        print("\n")
        j += 4

    cf_x = CaminoFinito("{3,5}", dr=1)
    cf_x1 = CaminoFinito("{3,5,8}", dr=0)
    print(cljapnn6.flja(1, CaminoFinito("{3,5,8}", dr=0)))
    mostrar_un_resultado_directo(1, [cf_x,cf_x1])
    resultado = cljapnn6.flja_inversa(161)
    print(resultado[1].__str__())

    mostrar_un_resultado_inverso(clja_ftc3, 398247982747298333)
    print("PRUEBA MARIO MULTIPLOS DE 7")
    print('***************************************************')

    snef01 = CaminoFinito("{7}", dr=0)
    snef02 = CaminoFinito("{7,14}", dr=0)
    snef03 = CaminoFinito("{7,14,21}", dr=0)
    snef04 = CaminoFinito("{7,14,21,28}", dr=0)
    snef04 = CaminoFinito("{7,14,21,28,35}", dr=0)
    snef05 = CaminoFinito("{7,14,21,28,35,42}", dr=0)

    snefs = [snef01, snef02, snef03, snef04, snef05]

    print("SNEFs: ")

    for snef in snefs:
        mostrar_un_resultado_directo(1, [snef])



    u01 = CaminoFinito("{7}", dr=0)
    u02 = CaminoFinito("{7,14}", dr=0)
    u03 = CaminoFinito("{7,14,21}", dr=0)
    universos = [u01, u02, u03]

    i = 1
    for universo in universos:
        print("**************************")
        print("UNIVERSO: " + str(i) + " -> " + universo.__str__())
        print("***************************")
        for snef in snefs:
            snef.dr=1
            mostrar_un_resultado_directo(1, [snef, universo])
        i += 1

    print("\nRESULTADOS CON MARIO: \n")
    camino01  = CaminoFinito("{0,2,3}", dr=0)
    camino01b = CaminoFinito("{0,2,3}", dr=1)
    camino02a = CaminoFinito("{0,2}", dr=0)
    camino02  = CaminoFinito("[0,2}", dr=0)

    mostrar_un_resultado_directo(1, [camino01])
    mostrar_un_resultado_directo(1, [camino02a])
    mostrar_un_resultado_directo(1, [camino01b, camino02])

    print("\n")
    mostrar_un_resultado_inverso(clja_ftc3, 177013)
    for i in range(10000000000000000, 10000000000000015):
        mostrar_un_resultado_inverso(clja_ftc3, i)

    cf1  = CaminoFinito("{52135661}", dr=0)
    cf1b = CaminoFinito("{52135661}", dr=1)
    cf2  = CaminoFinito("{52135661,52135662}", dr=0)
    mostrar_un_resultado_directo(1, [cf1, cf2])
    mostrar_un_resultado_directo(1, [cf1b, cf2])
    """
    10000000000000014
    5436254452220827
    5436254556492151
    923527217874156119319308459340
    """
    print(cljapnn5.flja(1, cf1b))
